package com.kotlin.kotlin.inicializacao_tardia;

public class inicializacaoTardia {

fun main() {

    // ğŸ”¸ lateinit permite declarar uma variÃ¡vel que serÃ¡ inicializada depois
    // SÃ³ funciona com tipos de referÃªncia (ex: String, List, etc), e com var
    lateinit var a: String

    // InicializaÃ§Ã£o tardia â€” se tentar usar 'a' antes disso, gera exceÃ§Ã£o
    a = "kotlin lateinit"
    println(a) // imprime: kotlin lateinit

    // ğŸ”¸ lazy: inicializaÃ§Ã£o sob demanda â€” executado apenas quando 'b' for usado pela primeira vez
    val b: String by lazy {
        println("Inicializando b...")
        "kotlin lazy"
    }
    println(b) // imprime: Inicializando b... \n kotlin lazy

    // ğŸ”¸ Delegates.notNull(): exige inicializaÃ§Ã£o antes de qualquer uso
    // Alternativa ao lateinit para tipos primitivos (nÃ£o pode usar lateinit com Int, Double, Boolean, etc)
    var c: Int by Delegates.notNull()
    var d: Boolean by Delegates.notNull()
    var e: Double by Delegates.notNull()

    c = 10 // se nÃ£o fizesse isso antes de usar, daria IllegalStateException
    println(c)
}
}
